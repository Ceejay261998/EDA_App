# Props to this dude for the Tkinter Designer
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8

# library for front-end
import tkinter as tk
from tkinter import Label, Canvas, Text, Button, PhotoImage
import tkinter.font as font

#library for back-end
import webbrowser 
import time
import subprocess
import getpass
from os import path

# Get the file path of this python file
OUTPUT_PATH = Path(__file__).parent

#Append the ./assets into python file path
ASSETS_PATH = OUTPUT_PATH / Path("./assets")

# Get username for customized value in variable
username = getpass.getuser()

# Variables for file paths
GlobalEDARef = r"/Emerson/GLOBAL EDA - General/References/"
FLMCECADxcl = r"C:/Users/" + username + "/Emerson/GLOBAL EDA - General/FLMC ECAD Components Monitoring.xlsx"
AltLib = r"C:/Users/" + username + GlobalEDARef + "Altium Concord Pro Library Management References.xlsx"
IPCFp = r"C:/Users/" + username + GlobalEDARef + "IPC Footprint Data and References.xlsx"
Pnumb = r"C:/Users/" + username + GlobalEDARef + "Part Numbering Process Flow and Guidelines_rev9.xlsx"
CompReview = r"C:/Users/" + username + "/Emerson/ANME Component Team - EDA/09 Monitorings/Component Review.xlsx"

# Variables for links
PwrApps = "https://apps.powerapps.com/play/e/default-eb06985d-06ca-4a17-81da-629ab99f6505/a/469e64ad-7edc-4674-8a51-c45ed4c4001e?tenantId=eb06985d-06ca-4a17-81da-629ab99f6505&source=portal&screenColor=rgba(255%2C%20255%2C%20255%2C%201)"
ECADBi = "https://app.powerbi.com/groups/688015c0-edf8-40a8-ae64-0338ece6d218/reports/b0797279-d148-4d14-93f5-97b75f09cc2e/ReportSection3f8ac91b104b34dd6747"
ECADRiskBi = "https://app.powerbi.com/groups/688015c0-edf8-40a8-ae64-0338ece6d218/reports/86186d18-6d9d-450d-83ff-28dda9991c7d/ReportSection77ddb1e26e11e8b0c705"

# Function for Opening links
def OpenLinks(linkstr):
    webbrowser.open(linkstr)
    time.sleep(1)

# Function for Opening files
def OpenFiles(filestr):
    subprocess.run(('cmd', '/C', 'start', '', filestr))

# Function for returning path of Assets folder
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

# Class for buttons (to not repeat code)
class Mybuttons(Button):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self['cursor'] = 'hand2'
        self['borderwidth']=0,
        self['highlightthickness']=0,
        self['relief']='raised'
        inter12=font.Font(family='Inter',size=9,)
        self['font']=inter12
        self['fg']='#E5D5D0'

# Class for photos (to not repeat code)
class MyPhotos (PhotoImage):
    def __init__(self, pic):
        PhotoImage.__init__(self, pic)
        self['file']=relative_to_assets(pic)

# Class for canvas (to not repeat code)
class MyCanvas (Canvas):
    def __init__(self, *args, **kwargs):
        Canvas.__init__(self, *args, **kwargs)
        self['bg'] = "#FFFFFF",
        self['height'] = 519,
        self['width'] = 862,
        self['bd'] = 0,
        self['highlightthickness'] = 0,
        self['relief'] = "ridge"
        self.place(x=0,y=0)
        self.create_rect_all_frames() #Rectangle canvas for all frames
        self.EmersonPicture = MyPhotos ('Emerson.png')
        self.EmersonFooterPic()

    def create_rect_all_frames (self):
        self.create_rectangle(0.0,
            0.0,
            587.0,
            519.0,
            fill="#00A4D2",
            outline="")

        self.create_rectangle(0.0,
            428.0,
            862.0,
            519.0,
            fill="#D6DFDF",
            outline="")

    def textforSEandDPXE (self, Platform_Code, Code): #method for creating text for DPXE and SE frames
        self.create_text(17.0,
            56.0,
            anchor="nw",
            text="Open Multiple {}".format(Platform_Code),
            fill="#FFFFFF",
            font=("Inter", 30 * -1))

        self.create_text(17.0,
            179.0,
            anchor="nw",
            text=" 1. Input the {} at the box at the right".format(Code) ,
            fill="#FFFFFF",
            font=("Inter", 24 * -1))

        self.create_text(17.0,
            216.0,
            anchor="nw",
            text=" 2. Click Go",
            fill="#FFFFFF",
            font=("Inter", 24 * -1))

        self.create_text(
            17.0,
            305.0,
            anchor="nw",
            text="Important: For this to work, a Chrome browser must be open,",
            fill="#FFFFFF",
            font=("Inter", 20 * -1)
        )

        self.create_text(
            18.0,
            329.0,
            anchor="nw",
            text="and you must be logged-in to ",
            fill="#FFFFFF",
            font=("Inter", 20 * -1)
        )

    def WholeBlueRectangle (self):
        self.create_rectangle(0.0,
            0.0,
            862.0,
            428.0,
            fill="#00A4D2",
            outline="")
    
    def EmersonFooterPic (self):
        self.create_image (EmersonFooterOthers,image=self.EmersonPicture)

    def DuplicateNote (self):
        self.create_text(
            5.0,
            501.0,
            anchor="nw",
            text="For convenience, duplicate values are automatically removed",
            fill="#000000",
            font=("Inter Regular", 10 * -1)
        )

class MyText (Text):
        def __init__(self, *args, **kwargs):
            Text.__init__(self, *args, **kwargs)
            self['bd']=0,
            self['bg']="#D9D9D9",
            self['highlightthickness']=0
                  
# Class for clickable labels (to not repeat code)  
class MyClickableLabels (Label):
    def __init__(self, *args, **kwargs):
        Label.__init__(self, *args, **kwargs)
        self['anchor']="nw", 
        self['cursor']="hand2", 
        self['fg']="blue", 
        self['bg']="#00A4D2",
        self.place(x=275, y=327)

# Dictionaries for button locations
NavButtonFirst = {"x":17.0,"y":464.0,"width":99.0,"height":24.0}
NavButtonSecond = {"x":135.0,"y":464.0,"width":99.0,"height":24.0}
NavButtonThird = {"x":253.0,"y":464.0,"width":99.0,"height":24.0}
NavButtonFourth = {"x":371.0,"y":464.0,"width":99.0,"height":24.0}
GoButton = {"x": 617.0,"y": 395.0,"width": 99.0,"height": 24.0}
ClearButton = {"x": 734.0,"y": 395.0,"width": 99.0,"height": 24.0}
HomePageButtons = {"x": 642,"width": 168.0,"height": 44.0}
EDAFilesFirstColumn = {"x": 67,"width": 252.0,"height": 50.1513671875}
EDAFilesSecondColumn = {"x": 543,"width": 252.0,"height": 50.1513671875}
DPXEandSETextArea = {"x": 602.0,"y": 68.0, "width": 244.0,"height": 313.0}
EmersonFooterOthers = [784.0,474.0]

# Class of the window (root)
class EDAApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        # the container contains the frames, on top of each other
        self.title("Component Team Utility App")
        self.geometry("862x519")
        self.resizable("False","False")
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)
        
        self.frames = {}
        for F in (HomePage, SiliconExpert, DPXE, EDAFiles, ECR_ECN_PIS):
            page_name = F.__name__
            frame = F(parent=container, controller=self)
            self.frames[page_name] = frame
            # all frames on same location, top one is visible
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame("HomePage")
        self.iconbitmap(relative_to_assets("Icon.ico"))

    def show_frame(self, page_name):
        # Show a frame for the given page name
        frame = self.frames[page_name]
        frame.tkraise()   

# include self in image to avoid not showing the images
# User Interface
class HomePage (tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        canvas = MyCanvas(self)

        canvas.create_text(
            17.0,
            179.0,
            anchor="nw",
            text="Choose functionalities from buttons at the right",
            fill="#FFFFFF",
            font=("Inter", 24 * -1)
        )
        
        self.Home_DPXE_button_image = MyPhotos("DPXE_button.png")
        Home_DPXE_button=Mybuttons(self, command=lambda: controller.show_frame("DPXE"),image=self.Home_DPXE_button_image)
        Home_DPXE_button.place(HomePageButtons,y=294.0)
        
        canvas.create_text(
            606.0,
            85.0,
            anchor="nw",
            text="Choose from below",
            fill="#000000",
            font=("Inter Bold", 25 * -1,'bold')
        )

        self.Home_SE_button_image = MyPhotos("SE_button.png")
        Home_SE_button = Mybuttons(self, command=lambda: controller.show_frame("SiliconExpert"),image=self.Home_SE_button_image)
        Home_SE_button.place(HomePageButtons,y=235.0)
  
        self.Home_Files_button_image = MyPhotos("Files_button.png")
        Home_Files_button = Mybuttons(self, command=lambda: controller.show_frame("EDAFiles"),image=self.Home_Files_button_image)
        Home_Files_button.place(HomePageButtons, y=176.0)

        canvas.create_text(
            17.0,
            56.0,
            anchor="nw",
            text="Welcome to the Component Team ",
            fill="#FFFFFF",
            font=("Inter", 30 * -1,'bold')
        )
        
        canvas.create_text(
            17.0,
            103.0,
            anchor="nw",
            text="Utility App!",
            fill="#FFFFFF",
            font=("Inter", 30 * -1,'bold')
        )

        canvas.create_text(
            5.0,
            501.0,
            anchor="nw",
            text="For Technical support, contact Ceejay.Lapuz@emerson.com\n",
            fill="#000000",
            font=("Inter Regular", 10 * -1)
        )

        self.ECR_ECN_PIS_button_image = MyPhotos("ECR_ECN_PIS_Page.png")
        ECR_ECN_PIS_Button = Mybuttons(self, command= lambda: controller.show_frame("ECR_ECN_PIS"),image= self.ECR_ECN_PIS_button_image)
        ECR_ECN_PIS_Button.place(NavButtonFirst)

class SiliconExpert (tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller

        def SELinks():
            SEurl = SE_textarea.get('1.0','end-1c') # get input from MPNs
            SpecialCharacters = {'+': '%2B', '#': '%23', '%': '%25', ' ': '%20', '?': '%3F'} # dictionary for special characters
            transtable = SEurl.maketrans(SpecialCharacters) # map the dictionary with the string to be replaced
            SEurl = SEurl.translate(transtable) # generate the translated string, whatever the maketrans method returned
            SEurl1 = list(SEurl.split()) #make the input as list
            SEurl1 = list(dict.fromkeys(SEurl1))
            SE_link = 'https://my.siliconexpert.com/search?text='
            URLs = [SE_link + x for x in SEurl1] # for loop to append SE_link string in elements of SEurl1 list
            for links in URLs: # create a for loop to open links
                OpenLinks(links)

        def clear_textSE():
            SE_textarea.delete('1.0','end-1c')

        canvas = MyCanvas(self)

        self.Home_button_image = MyPhotos("Home_Page.png")
        Home_Button = Mybuttons(self, command= lambda: controller.show_frame("HomePage"),image= self.Home_button_image)
        Home_Button.place(NavButtonFirst)

        self.DPXE_button_image = MyPhotos("DPXE_Page.png")
        DPXE_Button = Mybuttons(self, command= lambda: controller.show_frame("DPXE"),image= self.DPXE_button_image)
        DPXE_Button.place(NavButtonSecond)
    
        self.Files_button_image = MyPhotos("Files_Page.png")
        Files_Button = Mybuttons(self, command= lambda: controller.show_frame("EDAFiles"),image= self.Files_button_image)
        Files_Button.place(NavButtonThird)

        SE_Link = MyClickableLabels(self, text="Silicon Expert", font=("Inter", 20 * -1))
        SE_Link.bind("<Button-1>", lambda e:OpenLinks("https://my.siliconexpert.com/home"))

        canvas.textforSEandDPXE('Silicon Expert MPNs', 'MPNs')

        self.SE_Go_image = MyPhotos("SE_Go.png")
        SE_Go_button=Mybuttons(self, command=lambda: SELinks(),image=self.SE_Go_image)
        SE_Go_button.place(GoButton)

        self.SE_Clear_image = MyPhotos("SE_Clear.png")
        SE_Clear_button=Mybuttons(self, command=clear_textSE,image=self.SE_Clear_image)
        SE_Clear_button.place(ClearButton)

        SE_textarea = MyText(self)
        SE_textarea.place(DPXEandSETextArea)
        self.SE_Header = MyPhotos("SE_Header.png")
        canvas.create_image(
            724.0,
            42.0,
            image=self.SE_Header
        )

        canvas.DuplicateNote()

class DPXE (tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller

        def DPXELinks():
            DPXEurl = DPXE_textarea.get('1.0','end-1c') # get input from drawing numbers
            SpecialCharacters = {'+': '%2A', '&': '%2A', ' ': '%20','#': '%23' } # dictionary for special characters
            transtable = DPXEurl.maketrans(SpecialCharacters) # map the dictionary with the string to be replaced
            DPXEurl = DPXEurl.translate(transtable) # generate the translated string, whatever the maketrans method returned
            DPXEurl1 = list(DPXEurl.split()) #make the input as list
            DPXEurl1 = list(dict.fromkeys(DPXEurl1))
            DPXE_link = 'https://printroom.ascovalve.com/search.jsp?DWGNO='
            URLs = [DPXE_link + x for x in DPXEurl1] # for loop to append DPXE_link string in elements of DPXEurl1 list
            if (WildCardcheckbox.get() == 0):
                for links in URLs: # create a for loop to open links
                    OpenLinks(links)
            elif (WildCardcheckbox.get() == 1):
                for links in URLs: # create a for loop to open links
                    links = links + "*" # append * to the lines
                    OpenLinks(links)

        def clear_textDPXE():
            DPXE_textarea.delete('1.0','end-1c')

        canvas = MyCanvas(self)

        self.Home_button_image = MyPhotos("Home_Page.png")
        Home_Button = Mybuttons(self, command= lambda: controller.show_frame("HomePage"),image=self.Home_button_image)
        Home_Button.place(NavButtonFirst)

        self.SE_button_image = MyPhotos("SE_Page.png")
        SE_Button = Mybuttons(self, command= lambda: controller.show_frame("SiliconExpert"),image=self.SE_button_image)
        SE_Button.place(NavButtonSecond)
       
        self.Files_button_image = MyPhotos("Files_Page.png")
        Files_Button = Mybuttons(self, command= lambda: controller.show_frame("EDAFiles"),image= self.Files_button_image)
        Files_Button.place(NavButtonThird)

        DPXE_Link = MyClickableLabels(self, text="Digital Printroom", font=("Inter", 20 * -1))
        DPXE_Link.bind("<Button-1>", lambda e:OpenLinks("https://printroom.ascovalve.com"))

        canvas.textforSEandDPXE('DPXE Drawings', 'Drawings')
        self.DPXE_Go_image = MyPhotos("DPXE_Go.png")
        SE_Go_button=Mybuttons(self, command=lambda: DPXELinks(),image=self.DPXE_Go_image)
        SE_Go_button.place(GoButton)

        self.DPXE_Clear_image = MyPhotos("DPXE_Clear.png")
        DPXE_Clear_button=Mybuttons(self, command=clear_textDPXE,image=self.DPXE_Clear_image)
        DPXE_Clear_button.place(ClearButton)

        DPXE_textarea = MyText(self)
        DPXE_textarea.place(DPXEandSETextArea)

        self.image_image_2 = MyPhotos("DPXE_Header.png")
        canvas.create_image(
            724.0,
            42.0,
            image=self.image_image_2
        )

        WildCardcheckbox = tk.IntVar(value=1)
        checkboxwildcard = tk.Checkbutton (self, text='Wildcard Search',variable=WildCardcheckbox, onvalue=1, offvalue=0,bg="#00A4D2",activebackground="#00A4D2")
        checkboxwildcard.place(x=470,y=400)

        canvas.DuplicateNote()

class EDAFiles (tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        canvas = MyCanvas(self)
        canvas.WholeBlueRectangle()

        canvas.create_text(
            256.0,
            33.0,
            anchor="nw",
            text="Open EDA-Related Files",
            fill="#FFFFFF",
            font=("Inter", 30 * -1)
        )

        self.Home_button_image = MyPhotos("Home_Page.png")
        Home_Button = Mybuttons(self, command= lambda: controller.show_frame("HomePage"),image=self.Home_button_image)
        Home_Button.place(NavButtonFirst)

        self.SE_button_image = MyPhotos("SE_Page.png")
        SE_Button = Mybuttons(self, command= lambda: controller.show_frame("SiliconExpert"),image=self.SE_button_image)
        SE_Button.place(NavButtonSecond)
        
        self.DPXE_button_image = MyPhotos("DPXE_Page.png")        
        DPXE_Button = Mybuttons(self, command= lambda: controller.show_frame("DPXE"),image=self.DPXE_button_image)
        DPXE_Button.place(NavButtonThird)

        self.FLMC_Excel_photo = MyPhotos ("FLMC_ECAD_excel.png")
        FLMC_Excel = Mybuttons (self, command= lambda: OpenFiles(FLMCECADxcl), image=self.FLMC_Excel_photo)
        FLMC_Excel.place(EDAFilesFirstColumn,y=105.0)
  
        self.Altiumref_photo = MyPhotos("Altium_reference.png")
        Altiumref = Mybuttons (self, command= lambda: OpenFiles(AltLib), image=self.Altiumref_photo)
        Altiumref.place(EDAFilesFirstColumn,y=175.0)

        self.IPC_photo = MyPhotos("IPC.png")
        IPCfp = Mybuttons (self, command= lambda: OpenFiles(IPCFp), image=self.IPC_photo)
        IPCfp.place(EDAFilesFirstColumn,y=245.0)

        self.Partnumb_photo = MyPhotos("Part_Num.png")
        Partnumb = Mybuttons (self, command= lambda: OpenFiles(Pnumb), image=self.Partnumb_photo)
        Partnumb.place(EDAFilesFirstColumn,y=315.0)

        self.CompRev_photo = MyPhotos("Comp_Rev.png")
        CompRev = Mybuttons (self, command= lambda: OpenFiles(CompReview), image=self.CompRev_photo)
        CompRev.place(EDAFilesSecondColumn,y=105.0)

        self.PowerApp_photo = MyPhotos("PowerApp.png")
        PowerApp = Mybuttons (self, command= lambda: OpenLinks(PwrApps), image=self.PowerApp_photo)
        PowerApp.place(EDAFilesSecondColumn,y=175.0)

        self.FLMC_BI_photo = MyPhotos("FLMC_ECAD_BI.png")
        FLMC_Bi = Mybuttons (self, command= lambda: OpenLinks(ECADBi), image=self.FLMC_BI_photo)
        FLMC_Bi.place(EDAFilesSecondColumn,y=245.0)

        self.FLMCRisk_photo = MyPhotos("RiskBI.png")
        FLMCRisk = Mybuttons (self, command= lambda: OpenLinks(ECADRiskBi), image=self.FLMCRisk_photo)
        FLMCRisk.place(EDAFilesSecondColumn,y=315.0)

class ECR_ECN_PIS (tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.Textarea_photo = MyPhotos("RiskBI.png")
        self.Go_photo = MyPhotos("ASCO_Go.png")
        self.Clear_photo = MyPhotos("ASCO_Clear.png")          
        HeaderY=70.0
        TextAreaAsco = {'y':95.0,'width':244.0,'height':263.0}
        canvas = MyCanvas(self)
        canvas.WholeBlueRectangle()

        self.Home_button_image = MyPhotos("Home_Page.png")
        Home_Button = Mybuttons(self, command= lambda: controller.show_frame("HomePage"),image=self.Home_button_image)
        Home_Button.place(NavButtonFirst)

        TextECR = MyText(self)
        TextECR.place(TextAreaAsco, x=41.0)
        self.ECRHeader = MyPhotos("ECR_Header.png")
        canvas.create_image(163.0,HeaderY,image=self.ECRHeader)

        TextECN = MyText(self)
        TextECN.place(TextAreaAsco, x=310.0)
        self.ECNHeader = MyPhotos("ECN_Header.PNG")
        canvas.create_image(432.0,HeaderY,image=self.ECNHeader)

        TextPIS = MyText(self)
        TextPIS.place(TextAreaAsco, x=576.0)
        self.PISHeader = MyPhotos("PIS_Header.PNG")
        canvas.create_image(698.0,HeaderY,image=self.PISHeader)

        def GoButton (self,Go_X,GoCommand):
            ASCOGo = Mybuttons (self,image=self.Go_photo,command=GoCommand)
            ASCOGo.place(x=Go_X,y=371.9230651855469,width=99.0,height=23.076934814453125)

        def ClearButton (self,Go_X,GoCommand):
            ASCOclear = Mybuttons (self,image=self.Clear_photo,command=GoCommand)
            ASCOclear.place(x=Go_X,y=371.9230651855469,width=99.0,height=23.076934814453125)

        def ECRGoCommand():
            ECRToSearch = TextECR.get('1.0','end-1c') # get input from ECRs
            ECRToSearch = list(ECRToSearch.split()) #make the input as list
            ECRToSearch = list(dict.fromkeys(ECRToSearch))
            ECRlink = 'http://engineering.ascovalve.com/ECNCentral/ECRForm.asp?ECR_Number='
            ECRViewlink = 'http://engineering.ascovalve.com/ECNCentral/ViewECRForm.asp?ECR_Number='
            if (WildCardcheckbox.get() == 0):
                ECRURLs = [ECRlink + x for x in ECRToSearch] # for loop to append ECRlink string in elements of ECRToSearch list
                for links in ECRURLs: # create a for loop to open links
                    OpenLinks(links)
            elif (WildCardcheckbox.get() == 1):
                ECRURLs = [ECRViewlink + x for x in ECRToSearch] # for loop to append ECRViewlink string in elements of ECRToSearch list
                for links in ECRURLs: # create a for loop to open links
                    OpenLinks(links)
            

        def ECNGoCommand():
            ECNToSearch = TextECN.get('1.0','end-1c') # get input from ECNs
            ECNToSearch = list(ECNToSearch.split()) #make the input as list
            ECNToSearch = list(dict.fromkeys(ECNToSearch))
            ECNlink = 'http://engineering.ascovalve.com/ECNCentral/ViewMasterECNForm.asp?ECN_Number='
            ECNURLs = [ECNlink + x for x in ECNToSearch] # for loop to append ECNlink string in elements of ECNToSearch list
            for links in ECNURLs: # create a for loop to open links
                OpenLinks(links)

        def PISGoCommand():
            CodeToSearch = TextPIS.get('1.0','end-1c') # get input from PISCodes
            CodeToSearch = list(CodeToSearch.split()) #make the input as list
            CodeToSearch = list(dict.fromkeys(CodeToSearch))
            PISlink1 = 'http://engineering.ascovalve.com/EngineeringSearch/GlobalSearchResult.aspx?LOC=GLOBAL&FIELD=PRODNO&STR='
            PISlink2 = '&AD=&VOL=&MIN=&MAX='
            PISURLs = [PISlink1 + x + PISlink2 for x in CodeToSearch] # for loop to append PISlink string in elements of CodeToSearch list
            for links in PISURLs: # create a for loop to open links
                OpenLinks(links)

        GoButton (self,56.0,lambda: ECRGoCommand())
        GoButton (self,325.0,lambda: ECNGoCommand())
        GoButton (self,591.0,lambda: PISGoCommand())

        def clear_ECR():
            TextECR.delete('1.0','end-1c')
        def clear_ECN():
            TextECN.delete('1.0','end-1c')
        def clear_PIS():
            TextPIS.delete('1.0','end-1c')

        ClearButton (self,173.0,lambda: clear_ECR())
        ClearButton (self,442.0,lambda: clear_ECN())
        ClearButton (self,708.0,lambda: clear_PIS())

        WildCardcheckbox = tk.IntVar(value=1)
        checkboxwildcard = tk.Checkbutton (self, text='View Only ECRs',variable=WildCardcheckbox, onvalue=1, offvalue=0,bg="#00A4D2",activebackground="#00A4D2")
        checkboxwildcard.place(x=41,y=400)

        canvas.DuplicateNote()
        
app = EDAApp()
app.mainloop()